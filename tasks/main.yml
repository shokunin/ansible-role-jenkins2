---

# Install all OS packages (including Jenkins itself).
- include_tasks: "packages_{{ ansible_os_family }}.yml"

- name: Create Jenkins Home
  file:
    path: "{{ jenkins_home }}"
    state: directory
    owner: jenkins
    group: jenkins
    mode: u=rwx,g=rx,o=rx
  become: true

# Fire any pending restart handlers now, as we need Jenkins to be running.
# Otherwise, the config.xml file may not have been created yet.
- meta: flush_handlers

- name: Read Jenkins Config File
  slurp:
    src: "{{ jenkins_home }}/config.xml"
  become: true
  changed_when: false
  register: slurp_jenkins_config

- name: Determine Active Security Settings
  set_fact:
    # Yes, I'm parsing XML with a regex, and yes that's bad. But it's almost
    # certainly "good enough" in this instance, so.
    jenkins_active_security_realm: "{{ slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<securityRealm class=\"([^\"]+)\".*', '\\1') }}"
    # Note: this will be a string value; use the `| bool` filter on it if a boolean is needed.
    jenkins_security_enabled: "{{ true if (slurp_jenkins_config.content | b64decode | regex_replace('\n', '') | regex_replace('.*<useSecurity>([^<].*)</useSecurity>.*', '\\1')) == 'true' else false }}"

- name: Calculate API Connection Variables
  set_fact:
    # All communication with the Jenkins API will be done over localhost, for security.
    jenkins_url_local: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path }}"
    # The actual username and password used are dynamic to ensure that anon logins are used post-install (before security has been configured).
    jenkins_dynamic_admin_username: "{{ (jenkins_admin_username | default(None)) if (jenkins_security_enabled | bool) else None }}"
    jenkins_dynamic_admin_password: "{{ (jenkins_admin_password | default(None)) if (jenkins_security_enabled | bool) else None }}"

- name: Create Jenkins Init Script Directory
  # Reference: https://wiki.jenkins-ci.org/display/JENKINS/Post-initialization+script
  file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755
  become: true

# Include admin.yml
- include_tasks: "admin.yml"

# Install and/or update plugins.
- include_tasks: "plugins.yml"

- name: Configure Jenkins (Miscellaneous Settings)
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: |
      // These are the basic imports that the Jenkins interactive script console
      // automatically includes.
      import jenkins.*;
      import jenkins.model.*;
      import hudson.*;
      import hudson.model.*;

      // Enable the slave agent port, because most everyone will want it.
      // This will use a setter, which will set the value (to a random port)
      // and also initialize the slave agent.
      if (Jenkins.instance.slaveAgentPort != 0) {
        Jenkins.instance.slaveAgentPort=0
        println "Changed: slave agent configuration."
      }

      // Set the Jenkins external URL, if defined.
      // (Hat tip: http://stackoverflow.com/questions/30355079/jenkins-setting-root-url-via-groovy-api.)
      def externalUrl = "{{ jenkins_url_external | default('') | trim }}" ?: null
      def locationConfig = JenkinsLocationConfiguration.get()
      println("Configuring Jenkins External URL (current value: '${locationConfig.url}', target value: '${externalUrl}')...")
      if (externalUrl != locationConfig.url) {
        locationConfig.url = externalUrl
        locationConfig.save()
        println "Changed: external URL."
      }

      // Set the Jenkins proxy config, if defined.
      def proxyName = "{{ jenkins_http_proxy_server | default('') | trim }}"
      def proxyPortText = "{{ jenkins_http_proxy_port | default('') | trim }}"
      def proxyNoProxyHosts = "{{ jenkins_http_proxy_no_proxy_hosts | default([]) | join('\n') }}"
      if (proxyName == "") {
        if (Jenkins.instance.proxy != null) {
          Jenkins.instance.proxy = null
          ProxyConfiguration.getXmlFile().delete()
          println "Changed: removed proxy configuration"
        }
      } else if (
          Jenkins.instance.proxy == null
          || Jenkins.instance.proxy.name != proxyName
          || "" + Jenkins.instance.proxy.port != proxyPortText
          || Jenkins.instance.proxy.noProxyHost != proxyNoProxyHosts
      ) {
        try { proxyPort = Integer.parseInt(proxyPortText) } catch(NumberFormatException e) { throw new IllegalArgumentException("Invalid proxy port: ${proxyPortText}", e) }
        proxyDesired = new ProxyConfiguration(proxyName, proxyPort, null, null, proxyNoProxyHosts)
        proxyDesired.save()
        Jenkins.instance.proxy = ProxyConfiguration.load()
        println "Changed: proxy configuration."
      }
  register: shell_jenkins_config_misc
  changed_when: "(shell_jenkins_config_misc | success) and 'Changed' in shell_jenkins_config_misc.output"

- name: Configure Security Recommendations
  jenkins_script:
    url: "{{ jenkins_url_local }}"
    user: "{{ jenkins_dynamic_admin_username | default(omit) }}"
    password: "{{ jenkins_dynamic_admin_password | default(omit) }}"
    script: |
      // These are the basic imports that Jenkins interactive script console
      // automatically includes.
      import jenkins.*;
      import jenkins.model.*;
      import hudson.*;
      import hudson.model.*;

      // Disable CLI remoting, as its insecure and Jenkins yells about it.
      // Reference: <://support.cloudbees.com/hc/en-us/articles/234709648-Disable-Jenkins-CLI>
      if (Jenkins.instance.getDescriptor("jenkins.CLI").get().isEnabled()) {
        Jenkins.instance.getDescriptor("jenkins.CLI").get().setEnabled(false)
        Jenkins.instance.save()
        println "Changed CLI remoting: now disabled."
      }

      // Disable deprecated agent protocols.
      // Reference: <https://github.com/jenkinsci/jenkins/commit/efdd52e9e78cc057ea49a7d338ee575d131c1959>
      def agentProtocolWasDisabled = false
      def agentProtocolNames = new HashSet(Jenkins.instance.getAgentProtocols())
      jenkins.AgentProtocol.all().each { agentProtocol ->
          println "Checking: " + agentProtocol.name
          if (agentProtocol.isDeprecated() && agentProtocolNames.contains(agentProtocol.name)) {
              agentProtocolNames.remove(agentProtocol.name)
              agentProtocolWasDisabled = true
              println "Changed protocols: removed protocol: " + agentProtocol.name
          }
      }
      if (agentProtocolWasDisabled) {
        Jenkins.instance.setAgentProtocols(agentProtocolNames)
        Jenkins.instance.save()
      }

      // Enable agent-master access control, as its strongly recommended.
      // References:
      // * <https://jenkins.io/redirect/security-144/>
      // * <https://stackoverflow.com/a/41588568/1851299>
      if (Jenkins.instance.injector.getInstance(jenkins.security.s2m.AdminWhitelistRule.class).getMasterKillSwitch()) {
        Jenkins.instance.injector.getInstance(jenkins.security.s2m.AdminWhitelistRule.class).setMasterKillSwitch(false);
        Jenkins.instance.save()
        println "Changed agent-master access control: now disabled."
      }

      // Enable CSRF, as its strongly recommended.
      // Reference: <https://wiki.jenkins.io/display/JENKINS/CSRF+Protection>
      if (Jenkins.instance.getCrumbIssuer() == null ) {
        Jenkins.instance.setCrumbIssuer(new hudson.security.csrf.DefaultCrumbIssuer(true))
        Jenkins.instance.save()
        println "Changed CSRF: enabled."
      }
  register: shell_jenkins_security_recommendations
  changed_when: "(shell_jenkins_security_recommendations | success) and 'Changed' in shell_jenkins_security_recommendations.output"

# Fire any pending restart handlers now, or else the tests below here may not
# be valid.
- meta: flush_handlers

- name: Ensure Service 'jenkins' Is Running
  service:
    name: jenkins
    state: started
    enabled: yes
  become: true

- name: Grab Jenkins Web UI Content
  # By default, Jenkins 2 is set to require auth, so the only page we can grab 
  # without getting a 403 and redirect is the login page.
  uri:
    url: "http://localhost:{{ jenkins_port }}{{ jenkins_context_path | default('') }}/login"
    return_content: true
  environment:
    no_proxy: localhost
  register: jenkins_ui

- name: Verify Jenkins Web UI Content
  action: fail
  when: jenkins_ui.content.find('Jenkins ver. 2') == -1

# Include ssh.yml
- include_tasks: "ssh.yml"

# Include nginx.yml
- include_tasks: "nginx.yml"

# Include cloud_build if this jenkins installation will be used to make AMIs
- include_tasks: "cloud_build.yml"
  when: cloud_build

# Include Security
- include_tasks: "security.yml"
